/**
 * Classe `EnvironmentUtils`
 * 
 * Esta classe centraliza a leitura e atualiza√ß√£o de configura√ß√µes do ambiente da organiza√ß√£o Salesforce
 * atrav√©s do Custom Setting `ConfiguracaoSistema__c`. Ela permite acessar e manipular informa√ß√µes como 
 * o ambiente (produ√ß√£o ou sandbox), o n√≠vel de log, se o log est√° ativo, a habilita√ß√£o de mocks, entre 
 * outros par√¢metros configur√°veis diretamente do Custom Setting. Os valores configurados s√£o carregados e 
 * mantidos em cache para garantir a efici√™ncia e evitar m√∫ltiplas consultas.
 * 
 * ### Funcionalidade:
 * - **Leitura dos Valores Configurados:** Os m√©todos de leitura permitem acessar o valor do ambiente, 
 *   o n√≠vel de log, se o log est√° ativo, e outros par√¢metros.
 * - **Atualiza√ß√£o das Configura√ß√µes:** A classe fornece m√©todos para atualizar as configura√ß√µes no Custom 
 *   Setting, permitindo alterar o ambiente, o n√≠vel de log, e outros valores diretamente na plataforma.
 * - **Cache Interno:** A classe utiliza um cache para armazenar os valores configurados ap√≥s a leitura 
 *   inicial, evitando consultas repetidas e melhorando a performance das opera√ß√µes subsequentes.
 * - **Acesso a Custom Settings:** A classe interage diretamente com o Custom Setting `ConfiguracaoSistema__c`,
 *   que armazena valores espec√≠ficos para a organiza√ß√£o (como `Ambiente__c`, `Log_Level__c`, `Log_Ativo__c`, 
 *   `Habilita_Mock__c`, `Modo_Teste_Ativo__c`, entre outros).
 * 
 * ### M√©todos de Leitura:
 * - `isProduction()`: Retorna `true` se o ambiente configurado for produ√ß√£o.
 * - `isSandbox()`: Retorna `true` se o ambiente configurado for sandbox.
 * - `getRaw()`: Retorna o valor do ambiente como uma string.
 * - `isKnownEnvironment()`: Retorna `true` se o ambiente for conhecido (produ√ß√£o ou sandbox).
 * - `getLogLevel()`: Retorna o n√≠vel de log configurado.
 * - `isLogAtivo()`: Retorna se o log est√° ativo.
 * - `isMockEnabled()`: Retorna se a funcionalidade de mock est√° habilitada.
 * - `isModoTesteAtivo()`: Retorna se o modo de teste est√° ativo.
 * - `getTimeoutCallout()`: Retorna o timeout de callout configurado.
 * - `getMaxDebugLength()`: Retorna o m√°ximo de caracteres para trucar o campo de debug.
 * - `isFlowsDisabled()`: Retorna se os flows est√£o desativados.
 * 
 * ### M√©todos de Atualiza√ß√£o:
 * - `updateEnvironment(String newEnvironment)`: Atualiza o ambiente configurado (produ√ß√£o ou sandbox).
 * - `updateLogLevel(String newLogLevel)`: Atualiza o n√≠vel de log configurado.
 * - `updateLogAtivo(Boolean newLogAtivo)`: Atualiza se o log est√° ativo.
 * - `updateHabilitaMock(Boolean newHabilitaMock)`: Atualiza se a funcionalidade de mock est√° habilitada.
 * - `updateModoTesteAtivo(Boolean newModoTesteAtivo)`: Atualiza se o modo de teste est√° ativo.
 * - `updateTimeoutCallout(Decimal newTimeout)`: Atualiza o timeout de callout configurado.
 * - `updateMaxDebugLength(Decimal newLength)`: Atualiza o max debug length configurado.
 * - `updateDesativarFlows(Boolean newDesativarFlows)`: Atualiza se os flows est√£o desativados.
 * 
 * ### Uso nas Demais Classes:
 * Esta classe deve ser utilizada em outras classes que necessitam acessar ou modificar as configura√ß√µes 
 * globais de ambiente. Por exemplo:
 * - **Verifica√ß√£o do ambiente**: Qualquer l√≥gica que dependa de saber se a organiza√ß√£o est√° em ambiente 
 *   de produ√ß√£o ou sandbox pode usar os m√©todos `isProduction()` ou `isSandbox()`.
 * - **Configura√ß√£o de logs**: Classes que realizam logging podem utilizar `getLogLevel()` e `isLogAtivo()` 
 *   para ajustar o n√≠vel de log dinamicamente.
 * - **Controle de comportamento de mocks e testes**: M√©todos como `isMockEnabled()` e `isModoTesteAtivo()` 
 *   podem ser usados para configurar o comportamento de testes e mocks durante a execu√ß√£o de testes unit√°rios.
 * - **Altera√ß√£o de configura√ß√µes**: Em cen√°rios onde as configura√ß√µes precisam ser alteradas (como mudar 
 *   o ambiente de sandbox para produ√ß√£o), os m√©todos `updateEnvironment()` e outros devem ser utilizados.
 * 
 * ### Considera√ß√µes:
 * - A classe **carrega as configura√ß√µes apenas uma vez** quando a aplica√ß√£o √© inicializada ou quando 
 *   ocorre uma atualiza√ß√£o das configura√ß√µes. Isso garante que a leitura e as atualiza√ß√µes subsequentes 
 *   sejam eficientes.
 * - A classe interage diretamente com o **Custom Setting** `ConfiguracaoSistema__c`, que deve estar 
 *   configurado corretamente no Salesforce para armazenar as vari√°veis de ambiente. Isso permite centralizar 
 *   e gerenciar as configura√ß√µes de ambiente de maneira mais organizada e flex√≠vel.
 * - Certifique-se de **validar as permiss√µes de acesso** para o Custom Setting `ConfiguracaoSistema__c` 
 *   em todos os usu√°rios que possam interagir com a classe.
 */

 public class EnvironmentUtils {

    // üîí Cache de leitura
    @TestVisible private static String ENVIRONMENT;
    @TestVisible private static String LOG_LEVEL;
    @TestVisible private static Boolean LOG_ATIVO;
    @TestVisible private static Boolean HABILITA_MOCK;
    @TestVisible private static Boolean MODO_TESTE_ATIVO;
    @TestVisible private static Decimal TIMEOUT_CALLOUT;
    @TestVisible private static Decimal MAX_DEBUG_LENGTH;
    @TestVisible private static Boolean DESATIVAR_FLOWS;

    static {
        loadAllSettings();
    }

    @TestVisible
    private static void loadAllSettings() {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Ambiente__c, Log_Level__c, Log_Ativo__c, 
                                                Habilita_Mock__c, Modo_Teste_Ativo__c, 
                                                Timeout_Callout__c, Max_Debug_Length__c, Desativar_Flows__c 
                                           FROM ConfiguracaoSistema__c
                                           ORDER BY CreatedDate DESC LIMIT 1];

            if (conf != null) {
                ENVIRONMENT = String.isNotBlank(conf.Ambiente__c) ? conf.Ambiente__c.trim().toLowerCase() : null;
                LOG_LEVEL = String.isNotBlank(conf.Log_Level__c) ? conf.Log_Level__c.trim().toLowerCase() : null;
                LOG_ATIVO = conf.Log_Ativo__c;
                HABILITA_MOCK = conf.Habilita_Mock__c;
                MODO_TESTE_ATIVO = conf.Modo_Teste_Ativo__c;
                TIMEOUT_CALLOUT = conf.Timeout_Callout__c;
                MAX_DEBUG_LENGTH = conf.Max_Debug_Length__c;
                DESATIVAR_FLOWS = conf.Desativar_Flows__c;
            }
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao acessar Custom Setting: ' + ex.getMessage());
        }
    }

    // M√©todos de leitura dos campos
    @TestVisible
    public static Boolean isProduction() {
        return 'production'.equalsIgnoreCase(ENVIRONMENT);
    }

    @TestVisible
    public static Boolean isSandbox() {
        return 'sandbox'.equalsIgnoreCase(ENVIRONMENT);
    }

    @TestVisible
    public static String getRaw() {
        return ENVIRONMENT;
    }

    @TestVisible
    public static Boolean isKnownEnvironment() {
        return isProduction() || isSandbox();
    }

    @TestVisible
    public static String getLogLevel() {
        return LOG_LEVEL;
    }

    @TestVisible
    public static Boolean isLogAtivo() {
        return LOG_ATIVO;
    }

    @TestVisible
    public static Boolean isMockEnabled() {
        return HABILITA_MOCK;
    }

    @TestVisible
    public static Boolean isModoTesteAtivo() {
        return MODO_TESTE_ATIVO;
    }

    @TestVisible
    public static Decimal getTimeoutCallout() {
        return TIMEOUT_CALLOUT;
    }

    @TestVisible
    public static Decimal getMaxDebugLenght() {
        return MAX_DEBUG_LENGTH;
    }

    @TestVisible
    public static Boolean isFlowsDisabled() {
        return DESATIVAR_FLOWS;
    }

    // M√©todos de atualiza√ß√£o dos campos

    @TestVisible
    public static void updateEnvironment(String newEnvironment) {
        if (String.isNotBlank(newEnvironment) && (newEnvironment.equalsIgnoreCase('production') || newEnvironment.equalsIgnoreCase('sandbox'))) {
            try {
                // Realiza o SELECT para pegar o √∫ltimo registro criado
                ConfiguracaoSistema__c conf = [SELECT Id, Ambiente__c FROM ConfiguracaoSistema__c 
                                               ORDER BY CreatedDate DESC LIMIT 1];
                if (conf == null) {
                    conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
                }
                conf.Ambiente__c = newEnvironment;
                update conf;

                ENVIRONMENT = newEnvironment.toLowerCase();
            } catch (Exception ex) {
                System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Ambiente: ' + ex.getMessage());
            }
        } else {
            throw new IllegalArgumentException('Ambiente inv√°lido. Deve ser "production" ou "sandbox".');
        }
    }

    @TestVisible
    public static void updateLogLevel(String newLogLevel) {
        if (String.isNotBlank(newLogLevel) && (newLogLevel.equalsIgnoreCase('info') || newLogLevel.equalsIgnoreCase('error') || newLogLevel.equalsIgnoreCase('warn'))) {
            try {
                // Realiza o SELECT para pegar o √∫ltimo registro criado
                ConfiguracaoSistema__c conf = [SELECT Id, Log_Level__c FROM ConfiguracaoSistema__c 
                                               ORDER BY CreatedDate DESC LIMIT 1];
                if (conf == null) {
                    conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
                }
                conf.Log_Level__c = newLogLevel;
                update conf;

                LOG_LEVEL = newLogLevel.toLowerCase();
            } catch (Exception ex) {
                System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Log Level: ' + ex.getMessage());
            }
        } else {
            throw new IllegalArgumentException('N√≠vel de Log inv√°lido. Deve ser "INFO", "ERROR", ou "WARN".');
        }
    }

    @TestVisible
    public static void updateLogAtivo(Boolean newLogAtivo) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Log_Ativo__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Log_Ativo__c = newLogAtivo;
            update conf;

            LOG_ATIVO = newLogAtivo;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Log Ativo: ' + ex.getMessage());
        }
    }

    @TestVisible
    public static void updateHabilitaMock(Boolean newHabilitaMock) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Habilita_Mock__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Habilita_Mock__c = newHabilitaMock;
            update conf;

            HABILITA_MOCK = newHabilitaMock;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Habilita Mock: ' + ex.getMessage());
        }
    }

    @TestVisible
    public static void updateModoTesteAtivo(Boolean newModoTesteAtivo) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Modo_Teste_Ativo__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Modo_Teste_Ativo__c = newModoTesteAtivo;
            update conf;

            MODO_TESTE_ATIVO = newModoTesteAtivo;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Modo Teste Ativo: ' + ex.getMessage());
        }
    }

    @TestVisible
    public static void updateTimeoutCallout(Decimal newTimeout) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Timeout_Callout__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Timeout_Callout__c = newTimeout;
            update conf;

            TIMEOUT_CALLOUT = newTimeout;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Timeout Callout: ' + ex.getMessage());
        }
    }

    @TestVisible
    public static void updateMaxDebugLength(Decimal newLength) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Max_Debug_Length__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Max_Debug_Length__c = newLength;
            update conf;

            MAX_DEBUG_LENGTH = newLength;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Max Debug Length: ' + ex.getMessage());
        }
    }

    @TestVisible
    public static void updateDesativarFlows(Boolean newDesativarFlows) {
        try {
            // Realiza o SELECT para pegar o √∫ltimo registro criado
            ConfiguracaoSistema__c conf = [SELECT Id, Desativar_Flows__c FROM ConfiguracaoSistema__c 
                                           ORDER BY CreatedDate DESC LIMIT 1];
            if (conf == null) {
                conf = new ConfiguracaoSistema__c(SetupOwnerId = UserInfo.getOrganizationId());
            }
            conf.Desativar_Flows__c = newDesativarFlows;
            update conf;

            DESATIVAR_FLOWS = newDesativarFlows;
        } catch (Exception ex) {
            System.debug('‚ö†Ô∏è Erro ao atualizar Custom Setting Desativar Flows: ' + ex.getMessage());
        }
    }
}
